# -----------------------------------------------------------------------------
# Zinit
# -----------------------------------------------------------------------------
# ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
# source "${ZINIT_HOME}/zinit.zsh"

# Theme
# zinit ice depth"1"
# zinit light romkatv/powerlevel10k

# Syntax highlighting
# zinit ice depth"1"
# zinit light zdharma-continuum/fast-syntax-highlighting

# Cd
# zinit ice depth"1"
# zinit light b4b4r07/enhancd

# zinit ice depth"1"
# zinit light mollifier/cd-gitroot

# Completion
# zinit ice depth"1"
# zinit light zsh-users/zsh-completions

# zinit ice depth"1"
# zinit light zsh-users/zsh-autosuggestions

# zinit ice depth"1"
# zinit light Aloxaf/fzf-tab


# -----------------------------------------------------------------------------
# Powerlevel10k
# -----------------------------------------------------------------------------
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# -----------------------------------------------------------------------------
# Keybinding
# -----------------------------------------------------------------------------
stty stop undef

bindkey -e


# -----------------------------------------------------------------------------
# Alias
# -----------------------------------------------------------------------------
alias g='git'

alias ls='lsd'
# alias ls='exa'
# alias l='exa -ahl --git'
alias l='lsd -l'
alias la='lsd -la'
alias lat='lsd -lat'
alias tree='exa -T'

alias n='nvim'
alias c='code'

alias -g J='| jq'
alias -g R='| rg -i'

# expand global aliases by space
# http://blog.patshead.com/2012/11/automatically-expaning-zsh-global-aliases---simplified.html
globalias() {
  if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
    zle _expand_alias
    # zle expand-word
  fi
  zle self-insert
}

zle -N globalias

bindkey " " globalias


# -----------------------------------------------------------------------------
# Completion
# -----------------------------------------------------------------------------
autoload -Uz +X bashcompinit && bashcompinit
autoload -Uz compinit && compinit

# Aws
complete -C '/usr/local/bin/aws_completer' aws

# Azure
source $HOME/.zsh/completions/az.completion

# Terraform
complete -o nospace -C /home/nbchk/.tfenv/versions/1.1.9/terraform terraform

# Zsh-autosuggestions
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=grey,bg=grey,bold,underline"

# -----------------------------------------------------------------------------
# History
# -----------------------------------------------------------------------------
# Set a file name that histories are saved
export HISTFILE=~/.zsh_history

# Set the number of histories are saved
export HISTSIZE=1000000 # In memory
export SAVEHIST=1000000 # In $HISTFILE

# Save history with beginning timestamp and elapsed time
setopt extended_history

# Share histories among zsh sessions
setopt share_history

# Don't save duplicated history
setopt hist_ignore_all_dups

# Don't save history in starting with a white space
setopt hist_ignore_space

# Trim needless white spaces
setopt hist_reduce_blanks

# Don't save histories with history command
setopt hist_no_store


# -----------------------------------------------------------------------------
# Fzf
# -----------------------------------------------------------------------------
function fzf-select-history() {
  BUFFER=$(history -n -r 1 | fzf --no-sort --query="$LBUFFER")
  CURSOR=$#BUFFER
  zle reset-prompt
}

zle -N fzf-select-history
bindkey '^r' fzf-select-history

function fzf-select-files() {
  BUFFER="${LBUFFER}$(fd --type f | fzf --preview "bat  --color=always --style=header,grid --line-range :100 {}")"
  CURSOR=$#BUFFER
  zle reset-prompt
}

zle -N fzf-select-files
bindkey '^s^f' fzf-select-files

function fzf-select-dirs() {
  BUFFER="${LBUFFER}$(fd --type d | fzf)"
  CURSOR=$#BUFFER
  zle reset-prompt
}

zle -N fzf-select-dirs
bindkey '^s^d' fzf-select-dirs

function rgv() {
  if [ $# -eq 0 ]; then
    echo 'Need a string to search for!'
    echo 'Usage: rgv string'
    return 1
  fi

  search_words=$@

  search_result=$(
    rg --smart-case --vimgrep $search_words | \
    fzf --delimiter=':' \
      --preview='bat --color=always {1} -H {2} -r `expr {2} - 1`:`expr {2} + 1`'
  )

  if [ "$search_result" != '' ]; then
    file_path=`echo $search_result | awk -F':' '{print $1}'`
    line_number=`echo $search_result | awk -F':' '{print $2}'`
    column_number=`echo $search_result | awk -F':' '{print $3}'`
  else
    return
  fi

  nvim $file_path "+call cursor($line_number, $column_number)" "+set hlsearch | let @/ = \"$search_words\""
}

function fdv() {
  file_path=$(fd --type f | fzf --preview "bat  --color=always --style=header,grid --line-range :100 {}")
  nvim $file_path
}

function get-gh-latest-release() {
  if [ ! $# -eq 1 ]; then
    echo 'Need a repo name'
    echo 'Usage: get-gh-latest-release <repo name>'
    return 1
  fi

  repo_name=$1

  download_url=$(
    curl "https://api.github.com/repos/${repo_name}/releases/latest" | \
    jq -r '.assets[].browser_download_url' | \
    fzf
  )

  file_name=$(basename $download_url)
  curl -L "$download_url" > $file_name
}


# -----------------------------------------------------------------------------
# Tmux
# -----------------------------------------------------------------------------
if [[ ! -n $TMUX && $- == *l* ]]; then
  # get the IDs
  ID="`tmux list-sessions`"
  echo $ID
  if [[ -z "$ID" ]]; then
    tmux new-session
  fi
  create_new_session="Create New Session"
  ID="$ID\n${create_new_session}:"
  ID="`echo $ID | fzf | cut -d: -f1`"
  if [[ "$ID" = "${create_new_session}" ]]; then
    tmux new-session
  elif [[ -n "$ID" ]]; then
    tmux attach-session -t "$ID"
  else
    :  # Start terminal normally
  fi
fi


# -----------------------------------------------------------------------------
# Direnv
# -----------------------------------------------------------------------------
# eval "$(direnv hook zsh)"
